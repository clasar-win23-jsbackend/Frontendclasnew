@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Frontendclasnew.Filters
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Frontendclasnew.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager


<PageTitle>sign in</PageTitle>


<section class="signup">
    <div class="container">


        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">
                @ErrorMessage
            </div>
        }
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
            <DataAnnotationsValidator />

            <h1>Create Account</h1>
            <p> Already have an account? <a href="/signin">Sign in here</a></p>



            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name </label>
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                    <ValidationMessage For="() => Input.FirstName" />
                </div>

                <div id="form-lastname" class="input-group">
                    <label>Last name </label>
                    <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                    <ValidationMessage For="() => Input.LastName" />
                </div>


                <div id="form-email" class="input-group">
                    <label for="email">Email</label>
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div id="form-password" class="input-group">
                    <label for="password">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div id="form-confirmpassword" class="input-group">
                    <label for="confirm-password">Confirm Password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>



                <div class="input-sign-form">
                    <div id="form-terms" class="checkbox-group">
                        <div class="input-group">

                            <InputCheckbox @bind-Value="Input.TermsAndConditions" class="form-control" autocomplete="terms" aria-required="true" />
                            <label>I accept the terms & conditions </label>
                        </div>
                        <ValidationMessage For="() => Input.TermsAndConditions" />


                        <span asp-validation-for="Form.TermsAndConditions"></span>
                    </div>
                </div>
                <div id="submit-signup" class="sbm-button">

                    <button type="submit" class="btn btn-login"><i class="fa-regular fa-arrow-left-to-bracket"></i>Sign up</button>

                </div>
            </div>


        </EditForm>


    </div>




</section>

@code {
    

    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }



    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                UserName = Input.Email,
                Email = Input.Email

            };

        if (await UserManager.Users.AnyAsync(x => x.Email == user.Email))
        {
            ErrorMessage = "Email is already in use";
            return;
        }

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
            return;

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/Confirm?email{user.Email}=");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }




    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [CheckboxRequired]
        [Display(Name = "I agree to the Terms & Conditions ", Prompt = "Terms and Conditions")]
        public bool TermsAndConditions { get; set; }
    }
}
